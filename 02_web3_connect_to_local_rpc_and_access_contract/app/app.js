console.log('WELCOME TO DEXON WORKSHOP');

const init = async () => {
  /**
   * Make sure that when you get here, basic UI has already been rendered.
   * Web3 bundle is large so we might want to import it asynchronounsly
   *
   * Web3 team is working on reducing the bundle size, let's see how it goes
   * https://github.com/ethereum/web3.js/pull/2000
   */
  const Web3 = await import('web3');

  let httpHandler;

  if (window.dexon) {

    /**
     * Request approval to read account address from DekuSan wallet
     */
    await window.dexon.enable();

    /**
     * 1. DekuSan wallet injects a global variable called 'dexon'
     * 2. 'dexon' is a HTTP provider which allows you to communicate with RPC server over HTTP
     * 3. By passing the provider to web3, we are now able to interact with DEXON
     */
    httpHandler = new Web3.default(window.dexon); // httpHandler allows us to interact with the DEXON network

    // Get the ID of the network which DekuSan wallet is currently connecting to
    const networkID = await httpHandler.eth.net.getId();
    console.log(`Network id: ${networkID}`); // 5777 for local rpc, 238 for DEXON testnet

    /**
     * import the build artifacts generated by Truffle
     * abi and networks is what we care the most
     */
    const contractInfo = (await import('../build/contracts/Hello.json')).default;
    console.log('Build artifacts by truffle:', contractInfo);
    const { abi, networks } = contractInfo;
    console.log('contract ABI', abi);
    console.log('Netowkr information', networks);

    // Iterate all network ids and the contract address on that network
    Object.keys(networks).forEach(
      id => console.log(`Network ${id}: Contract is deployed to: ${networks[id].address}`)
    );

    // Choose the contract address from our current network
    const address = networks[networkID].address;
    console.log(`We are using ${address} on network ${networkID}`);

    // In order to interact with smart contract, we need to initial a "we3.eth.Contract" instance
    const helloContract = new httpHandler.eth.Contract(abi, address);

    // Let's call the "get" function of our Hello.sol smart contract
    const val = await helloContract.methods.get().call();
    console.log('Get: ', val);

    /**
      Let's bind an onclick function to the "get" button
      When we click that button, we call the contract's get function
     */
    const getButton = document.getElementById('get');
    getButton.onclick = async () => {
      // use 'call()' if the function only reads contract state
      const ret = await helloContract.methods.get().call();
      alert(ret);
    };

    // Get user account.
    const accountList = await httpHandler.eth.getAccounts();
    const myAccount = accountList[0];
    console.log('account', myAccount);
    
    /**
      Let's bind an onclick function to the "update" button
      When we click that button, we send transction
     */
    const updateButton = document.getElementById('update');
    updateButton.onclick = async () => {
      // use 'send()' if the function needs a transaction 
      const ret = await helloContract.methods.update().send({
        from: myAccount,
      });
      console.log('Update result', ret);
    };

  }
};

init();